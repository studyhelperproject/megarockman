import{r as c,g as d}from"./phaser-Czz4FBZH.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const l of a.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&i(l)}).observe(document,{childList:!0,subtree:!0});function t(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function i(s){if(s.ep)return;s.ep=!0;const a=t(s);fetch(s.href,a)}})();var r=c();const p=d(r);class y extends r.Scene{constructor(){super("TitleScene")}preload(){this.load.audio("select","assets/select.ogg")}create(){this.sound.play("select"),this.add.text(400,250,"Rockman Clone",{fontSize:"48px",fill:"#fff"}).setOrigin(.5);const e=this.add.text(400,350,"Start Game",{fontSize:"32px",fill:"#fff"}).setOrigin(.5);e.setInteractive(),e.on("pointerdown",()=>{this.scene.start("GameScene")})}}class h extends p.Physics.Arcade.Sprite{constructor(e,t,i){super(e,t,i,"spritesheet"),this.setSize(8,8)}fire(e,t,i,s,a){this.setTexture("spritesheet",a),this.body.reset(e,t),this.setActive(!0),this.setVisible(!0),this.setVelocity(i,s),this.body.setAllowGravity(!1)}preUpdate(e,t){super.preUpdate(e,t),(this.x<0||this.x>this.scene.physics.world.bounds.width)&&(this.setActive(!1),this.setVisible(!1))}}class u extends r.Scene{player;cursors;spaceKey;playerBullets;enemyBullets;enemies;playerDirection=1;playerHealth=28;isInvincible=!1;ladderLayer;onLadder=!1;isOverlappingLadder=!1;weaponEnergy={};availableWeapons=["buster"];currentWeaponIndex=0;constructor(e){super(e)}preload(){this.load.spritesheet("spritesheet","assets/spritesheet.png",{frameWidth:16,frameHeight:16}),this.preloadLevelAssets()}create(){this.cameras.main.setBackgroundColor("#1e1e1e"),this.player=this.physics.add.sprite(100,500,"spritesheet",9).setCollideWorldBounds(!0),this.player.setName("player"),this.player.setGravityY(300),this.anims.create({key:"left",frames:this.anims.generateFrameNumbers("spritesheet",{start:9,end:11}),frameRate:10,repeat:-1}),this.anims.create({key:"turn",frames:[{key:"spritesheet",frame:9}],frameRate:20}),this.anims.create({key:"right",frames:this.anims.generateFrameNumbers("spritesheet",{start:9,end:11}),frameRate:10,repeat:-1}),this.anims.create({key:"met_idle",frames:[{key:"spritesheet",frame:0}],frameRate:20}),this.anims.create({key:"met_attack",frames:[{key:"spritesheet",frame:1}],frameRate:20}),this.playerBullets=this.physics.add.group({classType:h,maxSize:10,runChildUpdate:!0}),this.enemyBullets=this.physics.add.group({classType:h,runChildUpdate:!0}),this.enemies=this.physics.add.group({runChildUpdate:!0}),this.createLevel(),this.cursors=this.input.keyboard.createCursorKeys(),this.spaceKey=this.input.keyboard.addKey(r.Input.Keyboard.KeyCodes.SPACE),this.input.keyboard.on("keydown-Q",this.switchWeapon,this),this.physics.add.overlap(this.playerBullets,this.enemies,this.handleBulletEnemyCollision,void 0,this),this.physics.add.collider(this.player,this.enemies,this.handlePlayerEnemyCollision,void 0,this),this.physics.add.collider(this.player,this.enemyBullets,this.handlePlayerEnemyCollision,void 0,this),this.scene.launch("HUDScene"),this.events.emit("healthChanged",this.playerHealth),this.events.on("unlock_weapon",this.unlockWeapon,this)}climbLadder(){this.isOverlappingLadder=!0}handleBulletEnemyCollision(e,t){e.destroy(),"takeDamage"in t&&typeof t.takeDamage=="function"?t.takeDamage(3):t.destroy()}handlePlayerEnemyCollision(e,t){if(this.isInvincible)return;if(this.playerHealth-=5,this.events.emit("healthChanged",this.playerHealth),console.log(`Player health: ${this.playerHealth}`),this.playerHealth<=0){this.scene.start("GameOverScene");return}this.isInvincible=!0;const i=this.player,s=Math.sign(i.x-t.x)||1;i.setVelocity(s*150,-150);const a=this.tweens.add({targets:this.player,alpha:.5,ease:"Power1",duration:100,yoyo:!0,repeat:-1});this.time.addEvent({delay:2e3,callback:()=>{this.isInvincible=!1,a.stop(),this.player.setAlpha(1)},callbackScope:this})}update(){this.isOverlappingLadder=!1,this.physics.world.overlap(this.player,this.ladderLayer);const e=this.isOverlappingLadder,t=r.Input.Keyboard.JustDown(this.cursors.up);if(this.onLadder)this.player.body.setAllowGravity(!1),this.player.setVelocityX(0),this.cursors.up.isDown?this.player.setVelocityY(-100):this.cursors.down.isDown?this.player.setVelocityY(100):this.player.setVelocityY(0),(t||!e)&&(this.onLadder=!1,this.player.body.setAllowGravity(!0));else if(this.player.body.allowGravity||this.player.body.setAllowGravity(!0),this.cursors.left.isDown?(this.player.setVelocityX(-100),this.player.setFlipX(!0),this.player.anims.play("left",!0),this.playerDirection=-1):this.cursors.right.isDown?(this.player.setVelocityX(100),this.player.setFlipX(!1),this.player.anims.play("right",!0),this.playerDirection=1):(this.player.setVelocityX(0),this.player.anims.play("turn")),t&&this.player.body.touching.down&&this.player.setVelocityY(-250),e&&(this.cursors.up.isDown||this.cursors.down.isDown)){this.onLadder=!0;const i=this.ladderLayer?.getTileAtWorldXY(this.player.x,this.player.y);i&&(this.player.x=i.getCenterX())}r.Input.Keyboard.JustDown(this.spaceKey)&&this.fireBullet()}fireBullet(){const e=this.availableWeapons[this.currentWeaponIndex];if(e==="buster"){const t=this.playerBullets.get(this.player.x,this.player.y);if(t){const i=400*this.playerDirection;t.fire(this.player.x,this.player.y,i,0,3)}}else e==="metal_blade"&&this.fireMetalBlade()}fireMetalBlade(){let e=0,t=0;const i=400;this.cursors.up.isDown&&(t=-1),this.cursors.down.isDown&&(t=1),this.cursors.left.isDown&&(e=-1),this.cursors.right.isDown&&(e=1),e===0&&t===0&&(e=this.playerDirection);const s=Math.atan2(t,e),a=Math.cos(s)*i,l=Math.sin(s)*i,o=this.playerBullets.get(this.player.x,this.player.y);o&&o.fire(this.player.x,this.player.y,a,l,6)}switchWeapon(){this.currentWeaponIndex=(this.currentWeaponIndex+1)%this.availableWeapons.length;const e=this.availableWeapons[this.currentWeaponIndex];console.log(`Switched to ${e}`)}unlockWeapon(e){this.availableWeapons.includes(e)||(this.availableWeapons.push(e),this.weaponEnergy[e]=28,console.log(`Unlocked ${e}`))}}class f extends r.Physics.Arcade.Sprite{currentState=0;stateTimer;enemyBullets;constructor(e,t,i,s){super(e,t,i,"spritesheet",0),this.enemyBullets=s,e.add.existing(this),e.physics.add.existing(this),this.body.setAllowGravity(!1),this.setCollideWorldBounds(!0),this.stateTimer=this.scene.time.addEvent({delay:this.getRandomWait(),callback:this.changeState,callbackScope:this,loop:!0})}getRandomWait(){return r.Math.Between(2e3,4e3)}changeState(){this.active&&(this.currentState===0?(this.currentState=1,this.play("met_attack"),this.fireBullets(),this.stateTimer.delay=1e3):(this.currentState=0,this.play("met_idle"),this.stateTimer.delay=this.getRandomWait()))}fireBullets(){const t=r.Math.DegToRad(15),i=this.enemyBullets.get(this.x,this.y);i&&i.fire(this.x,this.y,200,0,2);const s=this.enemyBullets.get(this.x,this.y);if(s){const l=200*Math.cos(t),o=-200*Math.sin(t);s.fire(this.x,this.y,l,o,2)}const a=this.enemyBullets.get(this.x,this.y);if(a){const l=200*Math.cos(t),o=200*Math.sin(t);a.fire(this.x,this.y,l,o,2)}}destroy(e){this.stateTimer.destroy(),super.destroy(e)}}class m extends u{constructor(){super("GameScene")}preloadLevelAssets(){this.load.tilemapTiledJSON("map","assets/tilemaps/level1.json")}createLevel(){const e=this.make.tilemap({key:"map"}),t=e.addTilesetImage("spritesheet","spritesheet");if(t){const s=e.createLayer("Ground",t,0,0);s&&(s.setCollisionByExclusion([-1]),this.physics.add.collider(this.player,s),this.physics.add.collider(this.enemies,s)),this.ladderLayer=e.createLayer("Ladders",t,0,0),this.ladderLayer&&(this.ladderLayer.setTileIndexCallback(4,this.climbLadder,this),this.physics.add.overlap(this.player,this.ladderLayer))}const i=new f(this,200,500,this.enemyBullets);this.enemies.add(i)}}class g extends r.Scene{constructor(){super("GameOverScene")}create(){this.add.text(400,250,"Game Over",{fontSize:"48px",fill:"#fff"}).setOrigin(.5);const e=this.add.text(400,350,"Retry",{fontSize:"32px",fill:"#fff"}).setOrigin(.5);e.setInteractive(),e.on("pointerdown",()=>{this.scene.start("TitleScene")})}}const v={type:r.AUTO,width:800,height:600,parent:"game",physics:{default:"arcade",arcade:{gravity:{y:300},debug:!1}},scene:[y,m,g],loader:{baseURL:"/"}};new r.Game(v);
